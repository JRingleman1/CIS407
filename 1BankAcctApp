import java.util.Scanner;

public class BankAcctApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create Checking Account Customer
        Customer checkingCustomer = null;
        CheckingAccount checking = null;
        while (checking == null) {
            try {
                System.out.print("Enter Customer ID for Checking: ");
                String id = scanner.nextLine();

                System.out.print("Enter Customer Name for Checking: ");
                String name = scanner.nextLine();

                checkingCustomer = new Customer(id, name);

                System.out.print("Enter Account Number for Checking: ");
                String accNum = scanner.nextLine();

                System.out.print("Enter Initial Balance for Checking: ");
                double balance = Double.parseDouble(scanner.nextLine());

                if (balance < 0) throw new IllegalArgumentException("Balance must be non-negative.");

                checking = new CheckingAccount(id, accNum, balance);
            } catch (Exception e) {
                System.out.println("Invalid input. Please try again.");
            }
        }

        // Create Savings Account Customer
        Customer savingsCustomer = null;
        SavingsAccount savings = null;
        while (savings == null) {
            try {
                System.out.print("Enter Customer ID for Savings: ");
                String id = scanner.nextLine();

                System.out.print("Enter Customer Name for Savings: ");
                String name = scanner.nextLine();

                savingsCustomer = new Customer(id, name);

                System.out.print("Enter Account Number for Savings: ");
                String accNum = scanner.nextLine();

                System.out.print("Enter Initial Balance for Savings: ");
                double balance = Double.parseDouble(scanner.nextLine());

                if (balance < 0) throw new IllegalArgumentException("Balance must be non-negative.");

                savings = new SavingsAccount(id, accNum, balance);
            } catch (Exception e) {
                System.out.println("Invalid input. Please try again.");
            }
        }

        // Manual Transactions
        System.out.println("\n--- Manual Transactions ---");

        System.out.println("\n--- Transactions for Checking Account ---");
        handleTransactions(scanner, checking, checkingCustomer);

        System.out.println("\n--- Transactions for Savings Account ---");
        handleTransactions(scanner, savings, savingsCustomer);
    }

    public static void handleTransactions(Scanner scanner, Account account, Customer customer) {
        String input;

        do {
            System.out.print("Enter transaction date (YYYY-MM-DD): ");
            String date = scanner.nextLine();

            String type = "";
            while (true) {
                System.out.print("Enter transaction type (DEP or WTH): ");
                type = scanner.nextLine().toUpperCase();
                if (type.equals("DEP") || type.equals("WTH")) break;
                System.out.println("Invalid type. Please enter DEP or WTH.");
            }

            double amount = 0;
            while (true) {
                try {
                    System.out.print("Enter transaction amount: ");
                    amount = Double.parseDouble(scanner.nextLine());
                    if (amount <= 0) throw new IllegalArgumentException();
                    break;
                } catch (Exception e) {
                    System.out.println("Invalid amount. Please enter a positive number.");
                }
            }

            if (type.equals("DEP")) {
                account.deposit(amount);
            } else {
                account.withdrawal(amount);
            }

            printSummary(account, customer, date, type, amount);

            System.out.print("Do you want to perform another transaction for this account? (yes/no): ");
            input = scanner.nextLine().toLowerCase();
        } while (input.equals("yes"));

        // Apply interest after all transactions
        if (account instanceof CheckingAccount) {
            ((CheckingAccount) account).applyInterest();
            printSummary(account, customer, "2025-06-04", "INT", 0);
        } else if (account instanceof SavingsAccount) {
            ((SavingsAccount) account).applyInterest();
            printSummary(account, customer, "2025-06-04", "INT", 0);
        }
    }

    public static void printSummary(Account account, Customer customer, String date, String type, double amount) {
        String accType = account instanceof CheckingAccount ? "Checking" : "Savings";
        double fee = (account instanceof CheckingAccount) ? 0.50 : 0.25;
        if (type.equals("INT")) fee = 0;

        System.out.printf("%-12s | %-15s | %-12s | %-8s | %-10s | %-4s | $%-8.2f | Fee: $%-4.2f | Balance: $%-8.2f\n",
                customer.getCustomerId(), customer.getName(), account.accountNumber, accType, date, type, amount, fee, account.balance());
    }
}
